#!/bin/python3

"""
                LIST    CARD
uuid            req     req
description     req     req
created                 req
modified        req     req
deleted         opt     opt
parent                  req
project                 opt
due                     opt
note                    opt
"""

import hammer

import argparse
import json
import os
import re
import subprocess
import sys
import time
import uuid

# convert an id into a list of indices
def parse_id(id):
    indices = []
    try:
        for value in id.split('.'):
           indices.append(int(value)) 

        if len(indices) < 1 or len(indices) > 2:
            raise Exception("invalid value count")
    except:
        print("invalid id string '" + id + "'")
        sys.exit(1)

    return indices

# convert feature string into <key, value> pair
def parse_feature(feature):
    match = re.match("^([-A-Za-z]+):(.*)$", feature)
    if not match:
        print("invalid feature string '" + feature + "'")
        sys.exit(1)

    return match.group(1), match.group(2)

# get the row values for list and card ids
def get_rows(data, metadata, indices, is_insert):
    list_row = indices[0] - 1
    card_row = None

    # validate list id
    max_list_id = len(metadata)
    if len(indices) == 1 and is_insert:
        max_list_id += 1

    if indices[0] <= 0 or indices[0] > max_list_id:
        print("invalid list id '" + str(indices[0]) + "'")
        sys.exit(1)

    # validate card id
    if len(indices) == 2:
        parent_uuid = data[list_row]["uuid"]
        card_list = metadata[parent_uuid]

        # validate card id
        max_card_id = len(card_list)
        if is_insert:
            max_card_id += 1

        if indices[1] <= 0 or indices[1] > max_card_id:
            print("invalid card id '" + str(indices[1]) + "'")
            sys.exit(1)

        if len(card_list) == 0:
            card_row = len(data)
        else:
            card_row = card_list[0] + indices[1] - 1

    return list_row, card_row

def add(args, data, metadata):
    # parse and validate id
    indices = parse_id(args.ID)
    list_row, card_row = get_rows(data, metadata, indices, True)

    # initialize record
    timestamp = int(time.time())
    datum = {
        "uuid": str(uuid.uuid4()),
        "description": args.DESCRIPTION,
        "created": timestamp,
        "modified": timestamp,
    }

    # parse features and update datum
    for feature in args.FEATURE:
        key, value = parse_feature(feature)
        datum[key] = value
    
    # add datum
    if len(indices) == 1:
        data.insert(list_row, datum)
    elif len(indices) == 2:
        datum["parent"] = data[list_row]["uuid"]
        data.insert(card_row, datum)

    return data

def list(args, data, metadata):
    listfmt = "%-6s%-6s%-20s%s"
    print(listfmt % ("LIST", "CARD", "PROJECT", "DESCRIPTION"))

    # iterate over data lists
    for list_count, list_uuid in enumerate(metadata):
        list_datum = data[list_count]
        print(str(list_count + 1) + " " + list_datum["description"])

        # iterate over card list
        card_list = metadata[list_uuid]
        for card_count, card_row in enumerate(card_list):
            # TODO - apply feature filters

            card_datum = data[card_row]
            note_flag = ""
            if "note" in card_datum:
                note_flag = "+"

            print(listfmt % ("",
                str(list_count + 1) + "." + str(card_count + 1) + note_flag,
                card_datum.get("project", ""),
                card_datum["description"]))

def modify(args, data, metadata):
    # parse and validate id
    indices = parse_id(args.ID)
    list_row, card_row = get_rows(data, metadata, indices, False)

    # retrieve datum
    if len(indices) == 1:
        datum = data[list_row]
    elif len(indices) == 2:
        datum = data[card_row]

    # parse features and update datum
    for feature in args.FEATURE:
        key, value = parse_feature(feature)
        datum[key] = value

    datum["modified"] = int(time.time())
    return data

def move(args, data, metadata):
    # parse
    src_indices = parse_id(args.SRC_ID)
    dst_indices = parse_id(args.DST_ID)

    # ensure ids have equal length
    if len(src_indices) != len(dst_indices):
        print("source id '" + args.SRC_ID + "' and destination id '"
            + args.DST_ID + "' have different length")
        sys.exit(1)

    # validate ids
    is_insert = True
    if len(src_indices) == 1 or src_indices[0] == dst_indices[0]:
        is_insert = False

    src_list_row, src_card_row = \
        get_rows(data, metadata, src_indices, is_insert)
    dst_list_row, dst_card_row = \
        get_rows(data, metadata, dst_indices, is_insert)

    if len(src_indices) == 1:
        # update datum
        datum = data[src_list_row]

        # delete original datum
        del data[src_list_row]

        # insert new datum
        if src_list_row < dst_list_row:
            dst_list_row - 1
        data.insert(dst_list_row, datum)

    print(str(src_card_row) + " " + str(dst_card_row))
    if len(src_indices) == 2:
        # update datum
        datum = data[src_card_row]
        datum["parent"] = data[dst_list_row]["uuid"]

        # delete original datum
        del data[src_card_row]

        # insert new datum
        if src_list_row != dst_list_row and src_card_row < dst_card_row:
            dst_card_row -= 1

        print(str(src_card_row) + " " + str(dst_card_row))
        data.insert(dst_card_row, datum)

    return data

def note(args, data, metadata):
    # parse and validate id
    indices = parse_id(args.ID)
    list_row, card_row = get_rows(data, metadata, indices, False)

    # find datum
    if len(indices) == 1:
        datum = data[list_row]
    elif len(indices) == 2:
        datum = data[card_row]

    # write existing note to note file
    note_file = hammer.data_directory + "/" + datum["uuid"] + ".md"

    note = datum.get("note", "")
    with open(note_file, "w") as f:
        f.write(note)

    # launch editor
    return_value = subprocess.call("vim " + note_file, shell=True)

    # read new note contents
    with open(note_file, "r") as f:
        content = f.readlines()
        note = "".join(content)

    os.remove(note_file)

    # write note to datum
    if note != "":
        datum["note"] = note
    elif "note" in datum:
        del datum["note"]

    datum["modified"] = int(time.time())
    return data

def remove(args, data, metadata):
    # parse and validate id
    indices = parse_id(args.ID)
    list_row, card_row = get_rows(data, metadata, indices, False)

    # delete datum
    if len(indices) == 1:
        # check if list has children
        list_uuid = data[list_row]["uuid"]
        if len(metadata[list_uuid]) != 0:
            print("list '" + str(indices[0]) + "' is not empty")
            sys.exit(1)

        del data[list_row]
    elif len(indices) == 2:
        # add datum to completed file
        datum = data[card_row]

        datum["end"] = int(time.time())
        with open(hammer.task_completed_file, "a") as f:
            f.write(json.dumps(datum, sort_keys=True) + "\n")

        del data[card_row]

    return data

def show(args, data, metadata):
    # parse and validate id
    indices = parse_id(args.ID)
    list_row, card_row = get_rows(data, metadata, indices, False)

    # print datum
    if len(indices) == 1:
        datum = data[list_row]
    elif len(indices) == 2:
        datum = data[card_row]

    print(json.dumps(datum, sort_keys=False, indent=2))

if __name__ == "__main__":
    # initialize argument parser
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(title="subcommands", dest="subparser")

    add_parser = subparsers.add_parser("add",
        help="add an element at the specified location")
    add_parser.add_argument("ID",
        help="element identifer [format: period delimited indices]")
    add_parser.add_argument("FEATURE", nargs="*",
        help="element features [format: 'key:value'] pair")
    add_parser.add_argument("DESCRIPTION",
        help="description of element")

    list_parser = subparsers.add_parser("list",
        help="list all elements")

    modify_parser = subparsers.add_parser("modify",
        help="modify features on a specific element")
    modify_parser.add_argument("ID",
        help="element identifer [format: period delimited indices]")
    modify_parser.add_argument("FEATURE", nargs="*",
        help="element features [format: 'key:value'] pair")

    move_parser = subparsers.add_parser("move",
        help="move an element within the same id level")
    move_parser.add_argument("SRC_ID",
        help="source element identifer [format: period delimited indices]")
    move_parser.add_argument("DST_ID",
        help="descrination element identifer [format: period delimited indices]")

    note_parser = subparsers.add_parser("note",
        help="edit the note attached to the specified element")
    note_parser.add_argument("ID",
        help="element identifer [format: period delimited indices]")

    remove_parser = subparsers.add_parser("remove",
        help="remove the specified element")
    remove_parser.add_argument("ID",
        help="element identifer [format: period delimited indices]")

    show_parser = subparsers.add_parser("show",
        help="show all features from the specified element")
    show_parser.add_argument("ID",
        help="element identifer [format: period delimited indices]")

    # parse arguments
    args = parser.parse_args()
    if args.subparser == None:
        parser.print_help()
        sys.exit(1)

    # parse data contents
    f = open(hammer.task_data_file, "r")
    contents = f.readlines()
    f.close()

    data = []
    for content in contents:
        data.append(json.loads(content))

    metadata = {}
    for count, datum in enumerate(data):
        if "parent" in datum:
            metadata[datum["parent"]].append(count)
        else:
            metadata[datum["uuid"]] = []

    # execute subcommand
    subcommands = {
        "add": add,
        "list": list,
        "move": move,
        "modify": modify,
        "note": note,
        "remove": remove,
        "show": show,
    }

    data = subcommands.get(args.subparser)(args, data, metadata)

    # write contents back
    if data:
        f = open(hammer.task_data_file, "w")
        for datum in data:
            f.write(json.dumps(datum, sort_keys=True) + "\n")
        f.close()
