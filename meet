#!/bin/bash

version="0.1.1"
usage="USAGE: $(basename $0) [COMMAND]
COMMANDS:
    add <name> DATE_OPT...  add a new meeting on generated dates
    chart [<date>]          chart the week surrounding a specified date
    help                    display this help menu
    list [index]            list all scheduled meetings
    remove <index>          remove the specified meeting

DATE_OPT:
    <date>
        ex. '2020-12-02'
    <date>/<starttime>/<endtime>
        ex. '2020-10-01/14:00:00/14:45:00'
    <startdate>/<starttime>/<endtime>/<dateinterval>/<enddate>
        ex. '2020-09-14/13:00:00/14:00:00/2 weeks/2020-12-14'"

# load commands from library
. library.sh

# check if applications are available
! inPath date && echo "'date' not found in users PATH" && exit 1

# initialize instance variables - set dir if not already set
[ -z "$meetdir" ] && meetdir="$HOME/.local/share/meet"
lookupfile="$meetdir/lookup"
timefile="$meetdir/time"

# if doesn't exist -> create base configuration files
[ ! -d "$meetdir" ] && mkdir -p $meetdir
[ ! -f "$lookupfile" ] && touch $lookupfile
[ ! -f "$timefile" ] && touch $timefile

# execute command
case "$1" in
    add)
		# check argument length
        (( $# < 3 )) && \
            echo "'add' requires at least two arguments" && exit 1

        # compute a new random id
		id=$(tr -dc 'A-F0-9' < /dev/urandom \
            | dd status=none bs=1 count=32)

        # iterate over date arguments
        for arg in "${@:3}"; do
            # split argument into fields
            IFS='/'
            read -r -a array <<< "$arg"

            # parse meeting times
            startdate="${array[0]}"
            starttime="00:00:00"
            (( "${#array[@]}" >= 3)) && starttime="${array[1]}"

            meettimestart="$(date -d "$startdate $starttime" "+%s")"
            (( "$?" != 0 )) && continue

            enddate="${array[0]}"
            endtime="23:59:59"
            (( "${#array[@]}" >= 3)) && endtime="${array[2]}"

            meettimeend="$(date -d "$enddate $endtime" "+%s")"
            (( "$?" != 0 )) && continue

            # validate times
            (( "$meettimeend" < "$meettimestart" )) && \
                echo "start time must be before end time" && exit 1

            if (( "${#array[@]}" == 5 )); then
                # if reoccuring -> compute subsequent dates
                maxtime="$(date -d "${array[4]} 23:59:59" "+%s")"
                (( "$?" != 0 )) && continue

                while (( "$meettimestart" <= "$maxtime" )); do
                    meettimeend="$(date -d "$enddate $endtime" "+%s")"
                    (( "$?" != 0 )) && continue

                    echo "$meettimestart $meettimeend $id" \
                        >> "$timefile"

                    # update dates with next interval
                    startdate="$(date -d "$startdate+${array[3]}" "+%Y-%m-%d")"
                    (( "$?" != 0 )) && continue

                    enddate="$(date -d "$enddate+${array[3]}" "+%Y-%m-%d")"
                    (( "$?" != 0 )) && continue

                    meettimestart="$(date -d "$startdate $starttime" "+%s")"
                    (( "$?" != 0 )) && continue
                done
            else
                echo "$meettimestart $meettimeend $id" >> "$timefile"
            fi
        done

        echo "$id $2" >> "$lookupfile"
        echo "[+] added '$2'"
        ;;
    chart)
		# check argument length
        (( $# > 3 )) && \
            echo "'chart' requires at most two arguments" && exit 1

        # initailize instance variables
        if [[ ! -z "$2" ]]; then
            datestring="$2"
        else
            datestring="$(date +%Y-%m-%d)"
        fi

        # get first day of week
        dayofweek="$(date -d "$datestring" "+%u")"
        (( "$?" != 0 )) && exit 1

        dayofweek=$(( $dayofweek - 1 ))
        datestring="$(date -d "$datestring-$dayofweek days" "+%Y-%m-%d")"

        # iterate over week
        for i in $(seq 0 6); do
            starttime="$(date -d "$datestring 00:00:00" "+%s")"
            endtime="$(date -d "$datestring 23:59:59" "+%s")"

            # today iterate over the days
            echo "- $(date -d "@$starttime" "+%A, %B %d %Y")"
            while read line; do
                meetingstart="$(echo $line | awk '{print $1}')"
                meetingend="$(echo $line | awk '{print $2}')"

                # check if meeting overlaps today
                if (( "$starttime" <= "$meetingend" )) \
                        && (( "$endtime" >= "$meetingstart" )); then
                    # print meeting information
                    id="$(echo $line | awk '{print $3}')"
                    meeting="$(cat $lookupfile | grep "$id" \
                        | awk '{$1=""; print substr($0, 2)}')"

                    startdate="$(date -d "@$meetingstart" "+%H:%M:%S")"
                    enddate="$(date -d "@$meetingend" "+%H:%M:%S")"

                    echo "    - $meeting: $startdate - $enddate"
                fi
            done <"$timefile"

            datestring="$(date -d "$datestring+1 day" "+%Y-%m-%d")"
        done
        ;;
    help)
        echo "$usage"
        ;;
    list)
		# check argument length
        (( $# > 2 )) && \
            echo "'list' requires zero or one argument(s)" && exit 1

        if [[ $# != 2 ]]; then
            # if no element argument -> print all meetings
            cat "$lookupfile" | awk '{$1=""; print NR " -" $0}'
        else
            # validate list index
            childcount=$(wc -l "$lookupfile" | awk '{print $1}')
            if (( "$2" <= "0" )) || (( "$2" > "$childcount" )); then
                echo "meeting index '$2' does not exist" && exit 1
            fi

            # print meeting
            id="$(head -n $2 "$lookupfile" \
                | tail -n 1 | awk '{print $1}')"
            meeting="$(head -n $2 "$lookupfile" \
                | tail -n 1 | awk '{$1=""; print substr($0, 2)}')"

            echo "$2 - $meeting"
            while read timeline; do
                meetingstart="$(echo $timeline | awk '{print $1}')"
                startdate="$(date -d "@$meetingstart" "+%Y-%m-%d %H:%M:%S")"

                meetingend="$(echo $timeline | awk '{print $2}')"
                enddate="$(date -d "@$meetingend" "+%Y-%m-%d %H:%M:%S")"

                echo "    $startdate - $enddate"
            done < <(cat "$timefile" | grep "$id")
        fi
        ;;
    remove)
		# check argument length
        (( $# != 2)) && echo "'remove' requires one argument" && exit 1

        # validate removal index
        childcount=$(wc -l "$lookupfile" | awk '{print $1}')
        if (( "$2" <= "0" )) || (( "$2" > "$childcount" )); then
			echo "meeting index '$2' does not exist" && exit 1
		fi

        # remove meeting from timefile
        id=$(head -n $2 "$lookupfile" \
            | tail -n 1 | awk '{print $1}')
        meeting=$(head -n $2 "$lookupfile" \
            | tail -n 1 | awk '{$1=""; print substr($0, 2)}')
        sed -i "/$id/d" "$timefile"

        # remove meeting from lookupfile
        sed -i "$2 d" "$lookupfile"

        echo "[-] removed '$meeting'"
        ;;
    version)
        echo "v$version"
        ;;
    *)
        echo "$usage"
        exit 1
        ;;
esac
