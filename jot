#!/bin/bash

version="0.1.0"
usage="USAGE: $(basename $0) COMMAND
COMMAND:
    help                        display this help menu
    add <element> <title>       add an element at the desired location
    edit <element>              edit an existing element
    list [element]              list all elements
    move <element> <element>    move an element within the same level
    remove <element>            remove the specified element
    version                     display the application version"

# load commands from element library
. element.sh

# initialize instance variables - set jotdir if not already set
datadir="$HOME/.local/share/jot"
gatefile="$datadir/gatefile"
levels=( "journal" "note" )

# if doesn't exist -> create base configuration files
[ ! -d "$datadir" ] && mkdir -p "$datadir"
[ ! -f "$gatefile" ] && touch "$gatefile"

# execute command
case "$1" in
	add)
		# check argument length
        (( $# != 3 )) && echo "'add' requires two arguments" && exit 1

        # add element
        uuid=$(tr -dc 'A-F0-9' < /dev/urandom \
            | dd status=none bs=1 count=32)
        add_element "$2" "$uuid" "$3"

        # if leaf element -> edit
        id_level "$2"
        if [ "$(( $idlevel + 1 ))" -ge "${#levels[@]}" ]; then
            vim "$datadir/$uuid"
        fi

	    echo "[+] added ${levels[$idlevel]} '$2' '$3'"
		;;
    edit)
		# check argument length
        (( $# != 2 )) && echo "'edit' requires one argument" && exit 1

        # validate element
        validate_id "$2"
        id_level "$2"
        if [ "$(( $idlevel + 1 ))" -lt "${#levels[@]}" ]; then
            echo "only able to edit '${levels[${#levels[@]}-1]}' level" \
                && exit 1
        fi

        find_element "$2" 
        vim "$element"
        ;;
    help)
        echo "$usage"
        ;;
    list)
		# check argument length
        (( $# > 2 )) && \
            echo "'list' requires zero or one argument(s)" && exit 1

        if [[ $# != 2 ]]; then
            # if no element argument -> print all boards
            awk '{$1=""; print NR " - " substr($0,2)}' "$gatefile"
        else
            print_element "$2"
        fi
        ;;
    move)
        # check argument length
        (( $# != 3 )) && \
            echo "'remove' requires three arguments" && exit 1

        move_element "$2" "$3"
		echo "[|] moved element '$2' to '$3'"
        ;;
    remove)
		# check argument length
        (( $# != 2 )) && echo "'remove' requires one argument" && exit 1

        remove_element "$2"
		echo "[-] removed element '$2'"
        ;;
    version)
        echo "$version"
        ;;
    *)
        echo "$usage"
        exit 1
        ;;
esac
