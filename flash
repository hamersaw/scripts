#!/bin/python3

import argparse
import json
import os
import random
import re
import subprocess
import sys
import time
import uuid

def touch(filename):
    f = open(filename, "a")
    f.close()

# intiailize data directory
data_directory = os.getenv("HOME") + "/.local/share/flash"
if not os.path.exists(data_directory):
    os.makedirs(data_directory)

# initialize card files
card_completed_file = data_directory + "/card.completed"
card_data_file = data_directory + "/card.data"

if not os.path.exists(card_completed_file):
    touch(card_completed_file)

if not os.path.exists(card_data_file):
    touch(card_data_file)

# convert an id into numeric valid
def parse_id(id):
    try:
        return int(id)
    except:
        print("invalid id string '" + id + "'")
        sys.exit(1)

# convert feature string into <key, value> pair
def parse_feature(feature):
    match = re.match("^([-A-Za-z]+):(.*)$", feature)
    if not match:
        print("invalid feature string '" + feature + "'")
        sys.exit(1)

    return match.group(1), match.group(2)

# get the row value
def get_row(data, index, is_insert):
    # validate list id
    max_id = len(data)
    if is_insert:
        max_id += 1

    if index <= 0 or index > max_id:
        print("invalid id '" + str(index) + "'")
        sys.exit(1)

    return index - 1

# get contents of a user edited file
def edit_with_file(filename, content):
    # write existing contents to file
    with open(filename, "w") as f:
        f.write(content)

    # launch editor
    return_value = subprocess.call("vim " + filename, shell=True)

    # read new contents
    with open(filename, "r") as f:
        lines = f.readlines()
        content = "".join(lines)

    # delete temporary file
    os.remove(filename)

    # remove trailing newline
    if len(content) != 0:
        content = content[:len(content)-1]

    return content

def list(args, data):
    fmt = "%-6s%-20s%-20s%-50s"
    print(fmt % ("ID", "DECK", "TOPIC", "QUESTION"))

    # iterate over data lists
    for count, datum in enumerate(data):
        question = datum["question"]
        if question.count('\n') > 0:
            question = question.split("\n")[0] + " ..."

        print(fmt % (str(count + 1), datum.get("deck", ""),
            datum.get("topic", ""), question))

def modify(args, data):
    # parse and validate id
    index = parse_id(args.ID)
    row = get_row(data, index, False)

    # retrieve datum
    datum = data[row]

    # parse features and update datum
    for feature in args.FEATURE:
        key, value = parse_feature(feature)
        datum[key] = value

    # use file to edit question
    question_file = data_directory + "/" + datum["uuid"] + ".md"
    question = edit_with_file(question_file, datum["question"])

    # write question to datum
    if question == "":
        print("error: question cannot be empty")
        return
    
    datum["question"] = question

    # use file to gather answer
    answer_file = data_directory + "/" + datum["uuid"] + ".md"
    answer = edit_with_file(answer_file, datum["answer"])

    # write answer to datum
    if answer == "":
        print("error: answer cannot be empty")
        return
    
    datum["answer"] = answer

    datum["modified"] = int(time.time())
    return data

def move(args, data):
    # parse
    src_index = parse_id(args.SRC_ID)
    dst_index = parse_id(args.DST_ID)

    src_row = get_row(data, src_index, False)
    dst_row = get_row(data, dst_index, False)

    # retrieve datum
    datum = data[src_row]

    # delete original datum
    del data[src_row]

    # insert new datum
    data.insert(dst_row, datum)

    return data

def new(args, data):
    # initialize record
    timestamp = int(time.time())
    datum = {
        "uuid": str(uuid.uuid4()),
        "created": timestamp,
        "modified": timestamp,
    }

    # parse features and update datum
    for feature in args.FEATURE:
        key, value = parse_feature(feature)
        datum[key] = value

    # use file to gather question
    question_file = data_directory + "/" + datum["uuid"] + ".md"
    question = edit_with_file(question_file, "please write question here ...")

    # write question to datum
    if question == "":
        print("error: question cannot be empty")
        return
    
    datum["question"] = question

    # use file to gather answer
    answer_file = data_directory + "/" + datum["uuid"] + ".md"
    answer = edit_with_file(answer_file, "please write answer here ...")

    # write answer to datum
    if answer == "":
        print("error: answer cannot be empty")
        return
    
    datum["answer"] = answer
    
    # add datum
    data.append(datum)

    return data

def remove(args, data):
    # parse and validate id
    index = parse_id(args.ID)
    row = get_row(data, index, False)

    # delete datum
    datum = data[row]
    del data[row]

    # add datum to completed file
    datum["completed"] = int(time.time())
    with open(card_completed_file, "a") as f:
        f.write(json.dumps(datum, sort_keys=True) + "\n")

    return data

def show(args, data):
    # parse and validate id
    index = parse_id(args.ID)
    row = get_row(data, index, False)

    # print datum
    datum = data[row]
    print(json.dumps(datum, sort_keys=False, indent=2))

def study(args, data):
    # randomly iterate over all data
    while (len(data) != 0):
        index = random.randrange(len(data))
        datum = data.pop(index)

        # print question
        input("CARD " + str(index + 1) + ": " + datum["question"])

        # print answer
        print(datum.get("answer", "answer not provided"))

if __name__ == "__main__":
    # initialize argument parser
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(title="subcommands", dest="subparser")

    list_parser = subparsers.add_parser("list", help="list all cards")

    modify_parser = subparsers.add_parser("modify",
        help="modify features on a specific card")
    modify_parser.add_argument("ID", help="card identifer")
    modify_parser.add_argument("FEATURE", nargs="*",
        help="element features [format: 'key:value'] pair")

    move_parser = subparsers.add_parser("move", help="move a card")
    move_parser.add_argument("SRC_ID", help="source card identifer")
    move_parser.add_argument("DST_ID", help="desctination card identifer")

    new_parser = subparsers.add_parser("new",
        help="add a new card")
    new_parser.add_argument("FEATURE", nargs="*",
        help="card features [format: 'key:value'] pair")

    remove_parser = subparsers.add_parser("remove",
        help="remove the specified card")
    remove_parser.add_argument("ID", help="card identifer")

    show_parser = subparsers.add_parser("show",
        help="show all features from the specified card")
    show_parser.add_argument("ID", help="card identifer")

    study_parser = subparsers.add_parser("study",
        help="iterate over cards in random order")

    # parse arguments
    args = parser.parse_args()
    if args.subparser == None:
        parser.print_help()
        sys.exit(1)

    # parse data contents
    f = open(card_data_file, "r")
    contents = f.readlines()
    f.close()

    data = []
    for content in contents:
        data.append(json.loads(content))

    # execute subcommand
    subcommands = {
        "list": list,
        "move": move,
        "modify": modify,
        "new": new,
        "remove": remove,
        "show": show,
        "study": study,
    }

    data = subcommands.get(args.subparser)(args, data)

    # write contents back
    if data:
        f = open(card_data_file, "w")
        for datum in data:
            f.write(json.dumps(datum, sort_keys=True) + "\n")
        f.close()
