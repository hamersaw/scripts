#!/bin/bash

version="1.0.3"
usage="USAGE: $(basename $0) COMMAND
COMMAND:
    clip                copy a key's value to the clipboard
    get <key>           retrieve a value for the specified key
    help                display this help menu
    init <gpg-username> initailize the stash repository
    list [subkey]       find all keys containing the specified subkey
    recover             fix system following a failure
    set <key> <value>   store the value for the specified key
    unset <key>         remove values for the key (and all subkeys)
    version             display the applications version"

stashcode() {
    # print md5sum hash of value
    echo "$1" | md5sum | awk '{print $1}'
}

stashfile() {
    # print first character of 'stashcode' + '.gpg'
    echo "$(stashcode $1 | awk '{print substr($1,1,1)}').gpg"
}

# check if applications are available
[ ! $(which gpg) ] && echo "'gpg' not found in users PATH" && exit 1
[ ! $(which xclip) ] && echo "'xclip' not found in users PATH" && exit 1

# initialize instance variables - set stashdir if not already set
[ -z "$stashdir" ] && stashdir="$HOME/.local/share/stash"
listfile="$stashdir/listfile.gpg"
userfile="$stashdir/userfile"

if [ -f $userfile ]; then
    gpgusername=$(cat $userfile)
fi

# execute command
case "$1" in
    clip)
        # check argument length
        (( $# != 2 )) && echo "'get' requires one argument" && exit 1

        # validate the keys stashfile exists 
        stashfile="$stashdir/$(stashfile $2)"
        if [ ! -f "$stashfile" ]; then
            echo "stashfile does not exist" && exit 1
        fi

        # validate key exists
        value=$(gpg -d -q $stashfile \
            | grep "^$(stashcode $2)" | awk '{print $2}')
        if [ -z "$value" ]; then
            echo "key '$2' does not exist" && exit 1
        fi

        # copy to clip
        echo -n "$value" | xclip -selection clipboard
        $(sleep 3; echo -n "" | xclip -selection clipboard) &
        ;;
    get)
        # check argument length
        (( $# != 2 )) && echo "'get' requires one argument" && exit 1

        # retrieve 'value' for all 'key's (including subkeys)
        for key in $(gpg -d -q $listfile | grep "^$2"); do
            stashfile="$stashdir/$(stashfile $key)"
            value=$(gpg -d -q $stashfile \
                | grep "^$(stashcode $key)" | awk '{print $2}')

            echo "$key : $value"
        done
        ;;
    help)
        echo "$usage"
        ;;
    init)
        # check argument length
        (( $# != 2 )) && echo "'init' requires one argument" && exit 1

        # validate gpg username
        [[ ! $(gpg --list-secret-keys | grep $2) ]] \
            && echo "gpg key '$2' doesn't exist" && exit 1

        # test if stashdir already exists
        [ -d "$stashdir" ] && \
            echo "stash directory '$stashdir' already exists" && exit 1

        # create stashdir, listfile, and userfile
        mkdir -p $stashdir
        echo "" | sed "/^$/d" | gpg -e -r $2 > $listfile
        echo "$2" > $userfile
        ;;
    list)
        if [[ -z $2 ]]; then
            # if no second argument -> output all keys
            gpg -d -q $listfile
        else
            # if a second argument -> print only those keys
            gpg -d -q $listfile | grep "^$2"
        fi
        ;;
    recover)
        # process all '.bak' files
        for bakfile in $(find $stashdir -name "*.bak"); do
            file=${bakfile%\.*}

            # replace existing file with bakfile 
            [ -f $file ] && rm $file
            mv $bakfile $file
        done
        ;;
    set)
        # check argument length
        (( $# != 3 )) && echo "'set' requires two arguments" && exit 1

        # check if 'key' exists in listfile
        gpg -d -q $listfile | grep -q "^$2$" && \
            echo "key '$2' already exists" && exit 1

        # initialize stashfile
        stashfile="$stashdir/$(stashfile $2)"
        [ ! -f $stashfile ] && echo "" | sed "/^$/d" \
            | gpg -e -r $gpgusername > $stashfile

        # add 'key value' to stashfile
        mv $stashfile $stashfile.bak
        { echo "$(stashcode $2) $3"; gpg -d -q $stashfile.bak; } \
            | gpg -e -r $gpgusername > $stashfile
        [ $? -ne 0 ] && echo "failed to add 'key' to stashfile" && exit 1

        # add 'key' to listfile
        mv $listfile $listfile.bak
        { echo "$2"; gpg -d -q $listfile.bak; } \
            | sort | gpg -e -r $gpgusername > $listfile
        [ $? -ne 0 ] && echo "failed to add 'key' to listfile" && exit 1

        # remove '.bak' files
        rm $stashfile.bak $listfile.bak
        ;;
    unset)
        # check argument length
        (( $# != 2 )) && echo "'unset' requires one argument" && exit 1

        # execute on all 'keys' in listfile
        for key in $(gpg -d -q $listfile | grep "$2"); do
            # remove key from listfile
            mv $listfile $listfile.bak
            gpg -d -q $listfile.bak | sed "/^$key/d" \
                | gpg -e -r $gpgusername > $listfile
            [ $? -ne 0 ] && \
                echo "failed to remove 'key' from stashfile" && exit 1

            # remove key from stashfile
            stashfile="$stashdir/$(stashfile $key)"
            mv $stashfile $stashfile.bak
            gpg -d -q $stashfile.bak | sed "/^$(stashcode $key)*/d" \
                | gpg -e -r $gpgusername > $stashfile
            [ $? -ne 1 ] && echo "failed to remove 'key' from listfile" && exit 1

            # remove '.bak' files
            rm $listfile.bak $stashfile.bak

            # if stashfile is empty -> delete
            [ -z "$(gpg -d -q $stashfile)" ] && rm $stashfile
        done
        ;;
    version)
        echo "$version"
        ;;
    *)
        echo "$usage"
        exit 1
        ;;
esac
