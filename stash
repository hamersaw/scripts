#!/bin/bash

usage() {
    echo "USAGE $(basename $0) [COMMAND]
COMMANDS:
    help                display this help menu
    get <key>           retrieve a value for the specified key
    init <gpg-username> initailize the stash repository
    list [subkey]       find all keys containing the specified subkey
    set <key> <value>   store the value for the specified key
    unset <key>         remove values for the key (and all subkeys)"
}

stashcode() {
    echo "$1" | md5sum | awk '{print $1}'
}

stashfile() {
    echo "$(stashcode $1 | awk '{print substr($1,1,2)}').gpg"
}

# load commands from library
. library.sh

# check if applications are available
! inPath gpg && echo "'gpg' not found in users PATH" && exit 1

# initialize instance variables
STASH_DIR="$HOME/.stash"
LISTFILE="$STASH_DIR/listfile.gpg"
USERFILE="$STASH_DIR/userfile"

if [ -f $USERFILE ]; then
    GPG_USERNAME=$(cat $USERFILE)
fi

# execute command
case "$1" in
    help)
        usage
        ;;
    get)
        # check argument length
        (( $# != 2 )) && \
            echo "the 'get' command requires one argument" && exit 1

        # retrieve 'VALUE' for all 'KEY's (including subkeys)
        for KEY in `gpg -d -q $LISTFILE | grep "^$2"`; do
            STASHFILE="$STASH_DIR/$(stashfile $KEY)"
            VALUE=$(gpg -d -q $STASHFILE \
                | grep "^$(stashcode $KEY)" | awk '{print $2}')

            echo "$KEY : $VALUE"
        done

        ;;
    init)
        # check argument length
        (( $# != 2 )) && \
            echo "the 'init' command requires one argument" && exit 1

        # validate gpg username
        [[ ! $(gpg --list-secret-keys | grep $2) ]] \
            && echo "gpg key '$2' doesn't exist" && exit 1

        # test if STASH_DIR already exists
        [ -d "$STASH_DIR" ] && \
            echo "stash directory '$STASH_DIR' already exists" && exit 1

        # create STASH_DIR, LISTFILE, and USERFILE
        mkdir -p $STASH_DIR
        echo "" | sed "/^$/d" | gpg -e -r $2 > $LISTFILE
        echo "$2" > $USERFILE

        ;;
    list)
        if [[ -z $2 ]]; then
            # if no second argument -> output all keys
            gpg -d -q $LISTFILE
        else
            # if a second argument -> print only those keys
            gpg -d -q $LISTFILE | grep "^$2"
        fi

        ;;
    set)
        # check argument length
        (( $# != 3 )) && \
            echo "the 'set' command requires two arguments" && exit 1

        # check if 'KEY' exists in LISTFILE
        gpg -d -q $LISTFILE | grep -q "^$2$" && \
            echo "key '$2' already exists" && exit 1

        # initialize STASHFILE
        STASHFILE="$STASH_DIR/$(stashfile $2)"
        [ ! -f $STASHFILE ] && echo "" | sed "/^$/d" \
            | gpg -e -r $GPG_USERNAME > $STASHFILE

        # add 'KEY VALUE' to STASHFILE
        mv $STASHFILE $STASHFILE.tmp
        { echo "$(stashcode $2) $3"; gpg -d -q $STASHFILE.tmp; } \
            | gpg -e -r $GPG_USERNAME > $STASHFILE
        rm $STASHFILE.tmp

        # add 'KEY' to LISTFILE
        mv $LISTFILE $LISTFILE.tmp
        { echo "$2"; gpg -d -q $LISTFILE.tmp; } \
            | gpg -e -r $GPG_USERNAME > $LISTFILE
        rm $LISTFILE.tmp

        ;;
    unset)
        # check argument length
        (( $# != 2 )) && \
            echo "the 'unset' command requires one argument" && exit 1

        # execute on all KEYS in LISTFILE
        for KEY in $(gpg -d -q $LISTFILE | grep "$2"); do
            # remove KEY from listfile
            mv $LISTFILE $LISTFILE.tmp
            gpg -d -q $LISTFILE.tmp | sed "/^$KEY/d" \
                | gpg -e -r $GPG_USERNAME > $LISTFILE
            rm $LISTFILE.tmp

            # remove KEY from STASHFILE
            STASHFILE="$STASH_DIR/$(stashfile $KEY)"
            mv $STASHFILE $STASHFILE.tmp
            gpg -d -q $STASHFILE.tmp | sed "/^$(stashcode $KEY)*/d" \
                | gpg -e -r $GPG_USERNAME > $STASHFILE
            rm $STASHFILE.tmp

            # if STASHFILE is empty -> delete
            [ -z "$(gpg -d -q $STASHFILE)" ] && rm $STASHFILE
        done

        ;;
    *)
        usage
        exit 1
        ;;
esac
