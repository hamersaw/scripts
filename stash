#!/bin/bash

version="1.1.0"
usage="USAGE: $(basename $0) COMMAND
COMMAND:
    clip                copy a key's value to the clipboard
    get <key>           retrieve a value for the specified key
    help                display this help menu
    init <gpg-username> initailize the stash repository
    list [subkey]       find all keys containing the specified subkey
    recover             fix system following a failure
    set <key> <value>   store the value for the specified key
    unset <key>         remove values for the key (and all subkeys)
    version             display the applications version"

# check if applications are available
[ ! $(which gpg) ] && echo "'gpg' not found in users PATH" && exit 1
[ ! $(which xclip) ] && echo "'xclip' not found in users PATH" && exit 1

# initialize instance variables - set stashdir if not already set
[ -z "$stashdir" ] && stashdir="$HOME/.local/share/stash"
stashfile="$stashdir/stashfile.gpg"
userfile="$stashdir/userfile"

if [ -f $userfile ]; then
    gpgusername=$(cat $userfile)
fi

# execute command
case "$1" in
    clip)
        # check argument length
        (( $# != 2 )) && echo "'clip' requires one argument" && exit 1

        # validate key exists
        value=$(gpg -d -q $stashfile | grep "^$2[\ ]")
        if [ -z "$value" ]; then
            echo "key '$2' does not exist" && exit 1
        fi

        # copy to clip
        echo "$value" | cut -f2- -d ' ' | xclip -selection clipboard
        $(sleep 3; echo -n "" | xclip -selection clipboard) &
        ;;
    get)
        # check argument length
        (( $# != 2 )) && echo "'get' requires one argument" && exit 1

        # print all <key, value> pairs in stashfile
        gpg -d -q $stashfile | grep "^$2[\ \.]"
        ;;
    help)
        echo "$usage"
        ;;
    init)
        # check argument length
        (( $# != 2 )) && echo "'init' requires one argument" && exit 1

        # test if stashdir already exists
        [ -d "$stashdir" ] && \
            echo "stash directory '$stashdir' already exists" && exit 1

        # validate gpg username
        [[ ! $(gpg --list-secret-keys | grep $2) ]] \
            && echo "gpg key '$2' doesn't exist" && exit 1

        # create stashdir, listfile, and userfile
        mkdir -p $stashdir
        echo "" | sed "/^$/d" | gpg -e -r $2 > $stashfile
        echo "$2" > $userfile
        ;;
    list)
        if [[ -z $2 ]]; then
            # if no second argument -> output all keys
            gpg -d -q $stashfile | awk '{print $1}'
        else
            # if a second argument -> print only those keys
            gpg -d -q $stashfile | grep "^$2[\ \.]" | awk '{print $1}'
        fi
        ;;
    recover)
        # check for failure
        [ ! -f $stashfile.bak ] && echo "unable to detect failure" && exit 1

        # replace existing file with bakfile
        rm $stashfile
        mv $stashfile.bak $stashfile
        ;;
    set)
        # check argument length
        (( $# != 3 )) && echo "'set' requires two arguments" && exit 1

        # check if 'key' exists in stashfile
        gpg -d -q $stashfile | grep -q "^$2 " && \
            echo "key '$2' already exists" && exit 1

        # add 'key value' to stashfile
        mv $stashfile $stashfile.bak
        { echo "$2 $3"; gpg -d -q $stashfile.bak; } \
            | sort | gpg -e -r $gpgusername > $stashfile
        [ $? -ne 0 ] && echo "failed to add 'key' to stashfile" && exit 1

        # remove '.bak' file
        rm $stashfile.bak
        ;;
    unset)
        # check argument length
        (( $# != 2 )) && echo "'unset' requires one argument" && exit 1

        # remove 'key value' to stashfile
        mv $stashfile $stashfile.bak
        gpg -d -q $stashfile.bak | grep -v "^$2[\ \.]" \
            | gpg -e -r $gpgusername > $stashfile
        [ $? -ne 0 ] && echo "failed to remove key(s) from stashfile" && exit 1

        # remove '.bak' file
        rm $stashfile.bak
        ;;
    version)
        echo "$version"
        ;;
    *)
        echo "$usage"
        exit 1
        ;;
esac
