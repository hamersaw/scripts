#!/bin/bash

version="0.1.0"
usage="USAGE: $(basename $0) COMMAND

COMMAND:
    help                                display this help menu
    add <element> [OPTIONS...] <title>  add an element at the desired location
    list [OPTIONS...]                   list all elements
    move <element> <element>            move an element within the same level
    remove <element>                    remove the specified element
    version                             display the application version

OPTIONS:
    todo"

id_list() {
    echo "${1%%\.*}"
}

id_card() {
    echo "${1#*\.}"
}

id_length() {
    local periodarray="${1//[^\.]}"
    echo "${#periodarray}"
}

# id_validate(id, is_insert)
id_validate() {
    # validate regex
    if [[ ! "$1" =~ ^[0-9]+(\.[0-9]+)*$ ]]; then
        echo "invalid id '$1': invalid characters" && exit 1
    fi

    # validate id length
    idlength=$(id_length "$1") # TODO - remove id_length function
    if [[ $idlength -gt 1 ]]; then
        echo "invalid id '$1': too many values" && exit 1
    fi

    # validate list id
    if [ $idlength -eq 0 ]; then
        local listid="$1"
        local listinsert="$2"
        listrow="$1"
    elif [ $idlength -eq 1 ]; then
        local listid=$(id_list "$1") # TODO - remove id_list function
        local listinsert=0
    fi

    listlength=$(wc -l $listfile | awk '{print $1}')
    local maxlistid=$(( listlength + listinsert ))
    if [ "$listid" -le 0 ] || [ "$listid" -gt $maxlistid ]; then
        echo "invalid list index '$listid'" && exit 1
    fi

    # validate card id
    if [ $idlength -eq 1 ]; then
        # find index in pendingfile
        listuuid=$(sed -n "$listid p" $listfile | awk '{print $1}')

        local cards=$(awk '{print NR,$0}' $pendingfile | grep "$listuuid")

        if [[ "$cards" == "" ]]; then
            local firstrowindex=1
            local count=0
        else
            local firstrowindex=$(echo "$cards" | head -n 1 | awk '{print $1}')
            local count=$(echo "$cards" | wc -l)
        fi

        # validate card id
        local cardid=$(id_card "$1") # TODO - remove id_card function
        local maxcardid=$(( count + $2 ))
        if [ "$cardid" -le 0 ] || [ "$cardid" -gt $maxcardid ]; then
            echo "invalid card index '$cardid'" && exit 1
        fi

        pendingrow=$(( firstrowindex + cardid - 1))
    fi
}

option_key() {
    echo "${1%%:*}"
}

option_value() {
    local value="${1#*:}"

    # remove " characters from value
    if [[ "$value" =~ \".*\" ]]; then
        valuelen=${#value}
        valuelen=$(( valuelen - 2 ))
        value=${value:1:$valuelen}
    fi

    echo "$value"
}

# card_list_uuid(card_id)
card_list_uuid() {
    listid=$(id_list "$1")
    listlength=$(wc -l $listfile | awk '{print $1}')
    if [ $listid -gt $listlength ]; then
        echo "invalid list index '$listid'" && exit 1
    fi

    listuuid=$(sed -n "$listid p" $listfile | awk '{print $1}')
    echo "$listuuid"
}

parse_record() {
    declare -n localrecord="$2"
    while read block; do
        key=$(option_key "$block")
        value=$(option_value "$block")
        localrecord["$key"]="$value"
    done < <(echo "$1" | grep -o '[.A-Za-z]*:"[-.A-Za-z0-9 ]*"')
}

record_to_string() {
    declare -n localrecord="$1"

    cardstring=""
    for key in $(sort -n <<<"$(printf "%s\n" "${!localrecord[@]}")"); do
        if [[ "${#cardstring}" != 0 ]]; then
            cardstring+=" "
        fi

        cardstring+="$key:\"${localrecord[$key]}\""
    done

    echo "[$cardstring]"
}

# initialize instance variables
datadir="$HOME/.local/share/$(basename $0)"
listfile="$datadir/list.txt"
completedfile="$datadir/completed.data"
pendingfile="$datadir/pending.data"

# if doesn't exist -> create base configuration files
[ ! -d "$datadir" ] && mkdir -p "$datadir"
[ ! -f "$listfile" ] && touch "$listfile"
[ ! -f "$completedfile" ] && touch "$completedfile"
[ ! -f "$pendingfile" ] && touch "$pendingfile"

# execute command
case "$1" in
    add)
        # check argument length
        (( $# < 3 )) && echo "'add' requires at least two arguments" && exit 1

        # validate arguments
        id_validate "$2" "1"

        # initialize record variables
        declare -A record
        record[description]="${@: -1}"
        record[uuid]=$(cat /proc/sys/kernel/random/uuid)

        # initialize card variables
        if [[ $idlength == 1 ]]; then
            timestamp=$(date +%s)
            record[entry]=$timestamp
            record[modified]=$timestamp
            record[status]="pending"
            record[uda.listuuid]=$listuuid # TODO - abstract fieldname
        fi

        # parse options
        indexlength=$(( $# - 3 ))
        for argument in "${@:3:$indexlength}"; do
            key=$(option_key "$argument")
            value=$(option_value "$argument")

            record[$key]="$value"
        done

        # add element # TODO - abstract list and card files
        if [[ $idlength == 0 ]]; then
            # add list
            if [ "$listrow" -gt $listlength ]; then
                echo "${record[uuid]} ${record[description]}" >> "$listfile"
            else
                sed -i "$listrow i ${record[uuid]} ${record[description]}" "$listfile"
            fi
        elif [[ $idlength == 1 ]]; then
            # compile card string
            cardstring=$(record_to_string record)

            # add card at index
            pendinglength=$(wc -l $pendingfile | awk '{print $1}')
            if [[ "$pendingrow" -gt $pendinglength ]]; then
                echo "$cardstring" >> $pendingfile
            else
                sed -i "$pendingrow i $cardstring" $pendingfile
            fi
        fi

        echo "[+] added '$2' '${record[description]}'"
        ;;
    help)
        echo "$usage"
        ;;
    list)
        # iterate over listfile
        while read listline; do
            # echo list number and description
            read -r -a listarray <<< "$listline"
            echo "${listarray[0]} ${listarray[@]:2}"

            # iterate over list cards
            cardid=1
            while read line; do
                # parse card into record associative array
                declare -A record
                parse_record "$line" record

                # TODO - apply filters (ex. project:home)

                # print card
                echo "    ${listarray[0]}.$cardid ${record[description]}"
                #  project:${record[project]} due:${record[due]}

                # increment card id
                cardid=$(( cardid + 1 ))
                unset record
            done < <(cat $pendingfile | grep "${listarray[1]}")
        done < <(awk '{print NR, $0}' "$listfile")
        ;;
    move)
        # check argument length
        (( $# != 3 )) && \
            echo "'move' requires three arguments" && exit 1

        # validate arguments
        id_validate "$2" "0"
        srcidlength="$idlength"

        # TODO - check if indices are the same level
        #if [[ $srcidlength != $dstidlength ]]; then
        #    echo "" && exit 1
        #fi

        if [[ $srcidlength == 0 ]]; then
            # move list
            srclistrow="$listrow"

            id_validate "$3" "1"
            dstlistrow="$listrow"

            # remove line from listfile
            line=$(sed -n "$srclistrow p" "$listfile")
            sed -i "$srclistrow d" "$listfile"
            listlength=$(( listlength - 1 ))

            # re-add line to listfile
            if [ "$dstlistrow" -gt $listlength ]; then
                echo "$line" >> "$listfile"
            else
                sed -i "$dstlistrow i $line" "$listfile"
            fi
        elif [[ $srcidlength == 1 ]]; then
            # parse pending row indices for source and destinate ids
            srcpendingrow="$pendingrow"
            srclistuuid="$listuuid"

            id_validate "$3" 1
            dstpendingrow="$pendingrow"
            dstlistuuid="$listuuid"

            # retrieve line from pendingfile
            line=$(sed -n "$srcpendingrow p" "$pendingfile")

            # parse and update record
            declare -A record
            parse_record "$line" record

            record[uda.listuuid]=$dstlistuuid
            record[modified]=$(date +%s)

            cardstring=$(record_to_string record)

            # remove line from pendingfile
            pendinglength=$(wc -l $pendingfile | awk '{print $1}')
            sed -i "$srcpendingrow d" "$pendingfile"
            pendinglength=$(( pendinglength - 1 ))

            # re-add cardstring to pendingfile
            if [ "$srclistuuid" != "$dstlistuuid" ] && \
                    [ "$srcpendingrow" -lt "$dstpendingrow" ]; then
                dstpendingrow=$(( dstpendingrow - 1 ))
            fi

            if [ "$dstpendingrow" -gt $pendinglength ]; then
                echo "$cardstring" >> $pendingfile
            else
                sed -i "$dstpendingrow i $cardstring" $pendingfile
            fi
        fi

        echo "[|] moved '$2' to '$3'"
        ;;
    remove)
        # check argument length
        (( $# != 2 )) && echo "'remove' requires one argument" && exit 1

        # validate arguments
        id_validate "$2" "0"

        if [[ $idlength == 0 ]]; then
            echo "TODO - remove list"
        elif [[ $idlength == 1 ]]; then
            # retrieve line from pendingfile
            line=$(sed -n "$pendingrow p" "$pendingfile")

            # parse and update record
            declare -A record
            parse_record "$line" record
            record[status]="completed"
            record[modified]=$(date +%s)

            cardstring=$(record_to_string record)

            # remove line from pendingfile
            sed -i "$pendingrow d" "$pendingfile"

            # add card to completed file
            echo "$cardstring" >> $completedfile
        fi

        echo "[-] removed '$2'"
        ;;
    version)
        echo "$version"
        ;;
    *)
        echo "$usage"
        exit 1
        ;;
esac
