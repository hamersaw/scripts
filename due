#!/bin/python3

"""
                LIST    CARD
uuid            req     req
description     req     req
created                 req
modified        req     req
deleted         opt     opt
parent                  req
project                 opt
note                    opt
"""

import json
import os
import re
import subprocess
import sys
import time
import uuid

help_message = """USAGE: due COMMAND
COMMAND:
    add <ID> [FEATURE...] <DESC>    add an element at the desired location
    cat <ID>                        display note attached to the specified element
    context                         list all initialized contexts
    help                            display this help menu
    list                            list all elements
    modify <ID> [FEATURE...]        update options on element
    move <SRCID> <DSTID>            move an element within the same level
    note <ID>                       edit the element note
    remove <ID>                     remove the specified element
    switch <CONTEXT>                change the currently active context

FEATURE:
    <KEY>:<VALUE>                   generic key value pair

ID:
    (1-9)(.1-9)*                    dynamic element identifier""" 

BOLD = '\033[1m'
END = '\033[0m'

def touch(filename):
    f = open(filename, "a")
    f.close()

# intiailize data directory
data_directory = os.getenv("HOME") + "/.local/share/due"
if not os.path.exists(data_directory):
    os.makedirs(data_directory)

# initialize task files
context_file = data_directory + "/context.txt"

if not os.path.exists(context_file):
    touch(context_file)

# convert an id into a list of indices
def parse_id(id):
    indices = []
    try:
        for value in id.split('.'):
           indices.append(int(value)) 

        if len(indices) < 1 or len(indices) > 2:
            raise Exception("invalid value count")
    except:
        print("invalid id string '" + id + "'")
        sys.exit(1)

    return indices

# convert feature string into <key, value> pair
def parse_feature(feature):
    match = re.match("^([-A-Za-z]+):(.*)$", feature)
    if not match:
        print("invalid feature string '" + feature + "'")
        sys.exit(1)

    return match.group(1), match.group(2)

# get the row values for list and card ids
def get_rows(data, metadata, indices, is_insert):
    list_row = indices[0] - 1
    card_row = None

    # validate list id
    max_list_id = len(metadata)
    if len(indices) == 1 and is_insert:
        max_list_id += 1

    if indices[0] <= 0 or indices[0] > max_list_id:
        print("invalid list id '" + str(indices[0]) + "'")
        sys.exit(1)

    # validate card id
    if len(indices) == 2:
        parent_uuid = data[list_row]["uuid"]
        card_list = metadata[parent_uuid]

        # validate card id
        max_card_id = len(card_list)
        if is_insert:
            max_card_id += 1

        if indices[1] <= 0 or indices[1] > max_card_id:
            print("invalid card id '" + str(indices[1]) + "'")
            sys.exit(1)

        if len(card_list) == 0:
            card_row = len(data)
        else:
            card_row = card_list[0] + indices[1] - 1

    return list_row, card_row

def add(args, data, metadata):
    # validate arguments
    if len(args) < 2:
        print("the 'add' command requires at least 2 arguments")
        sys.exit(1)

    # parse and validate id
    indices = parse_id(args[0])
    list_row, card_row = get_rows(data, metadata, indices, True)

    # initialize record
    timestamp = int(time.time())
    datum = {
        "uuid": str(uuid.uuid4()),
        "description": args[len(args)-1],
        "created": timestamp,
        "modified": timestamp,
    }

    # parse features and update datum
    for feature in args[1:len(args)-1]:
        key, value = parse_feature(feature)
        datum[key] = value
    
    # add datum
    if len(indices) == 1:
        data.insert(list_row, datum)
    elif len(indices) == 2:
        datum["parent"] = data[list_row]["uuid"]
        data.insert(card_row, datum)

    return data

def cat(args, data, metadata):
    # validate arguments
    if len(args) != 1:
        print("the 'cat' command requires 1 argument")
        sys.exit(1)

    # parse and validate id
    indices = parse_id(args[0])
    list_row, card_row = get_rows(data, metadata, indices, False)

    # find datum
    if len(indices) == 1:
        datum = data[list_row]
    elif len(indices) == 2:
        datum = data[card_row]

    # write existing note to note file
    note = datum.get("note", "")
    print(note, end="")

def list(args, data, metadata):
    # validate arguments
    if len(args) != 0:
        print("the 'list' command requires 0 arguments")
        sys.exit(1)

    listfmt = "%-6s%-6s%-6s%s"
    print((BOLD + listfmt + END) % ("LIST", "CARD", "NOTE", "DESCRIPTION"))

    # iterate over data lists
    for list_count, list_uuid in enumerate(metadata):
        list_datum = data[list_count]
        print(BOLD + str(list_count + 1) + " " + list_datum["description"] + END)

        # iterate over card list
        card_list = metadata[list_uuid]
        for card_count, card_row in enumerate(card_list):
            # TODO - apply feature filters

            card_datum = data[card_row]
            note_flag = ""
            if "note" in card_datum:
                note_flag = "x"

            print(listfmt % ("",
                str(list_count + 1) + "." + str(card_count + 1),
                note_flag,
                card_datum["description"]))

def help(args, data, metadata):
    print(help_message)

def modify(args, data, metadata):
    # validate arguments
    if len(args) < 2:
        print("the 'modify' command requires at least 2 arguments")
        sys.exit(1)

    # parse and validate id
    indices = parse_id(args[0])
    list_row, card_row = get_rows(data, metadata, indices, False)

    # retrieve datum
    if len(indices) == 1:
        datum = data[list_row]
    elif len(indices) == 2:
        datum = data[card_row]

    # parse features and update datum
    for feature in args[1:]:
        key, value = parse_feature(feature)
        datum[key] = value

    datum["modified"] = int(time.time())
    return data

def move(args, data, metadata):
    # validate arguments
    if len(args) != 2:
        print("the 'move' command requires 2 arguments")
        sys.exit(1)

    # parse
    src_indices = parse_id(args[0])
    dst_indices = parse_id(args[1])

    # ensure ids have equal length
    if len(src_indices) != len(dst_indices):
        print("source id '" + args[0] + "' and destination id '"
            + args[1] + "' have different length")
        sys.exit(1)

    # validate ids
    is_insert = True
    if len(src_indices) == 1 or src_indices[0] == dst_indices[0]:
        is_insert = False

    src_list_row, src_card_row = \
        get_rows(data, metadata, src_indices, is_insert)
    dst_list_row, dst_card_row = \
        get_rows(data, metadata, dst_indices, is_insert)

    if len(src_indices) == 1:
        # update datum
        datum = data[src_list_row]

        # delete original datum
        del data[src_list_row]

        # insert new datum
        data.insert(dst_list_row, datum)

    if len(src_indices) == 2:
        # update datum
        datum = data[src_card_row]
        datum["parent"] = data[dst_list_row]["uuid"]

        # delete original datum
        del data[src_card_row]

        # insert new datum
        if src_list_row != dst_list_row and src_card_row < dst_card_row:
            dst_card_row -= 1

        data.insert(dst_card_row, datum)

    return data

def note(args, data, metadata):
    # validate arguments
    if len(args) != 1:
        print("the 'note' command requires 1 argument")
        sys.exit(1)

    # parse and validate id
    indices = parse_id(args[0])
    list_row, card_row = get_rows(data, metadata, indices, False)

    # find datum
    if len(indices) == 1:
        datum = data[list_row]
    elif len(indices) == 2:
        datum = data[card_row]

    # write existing note to note file
    note_file = data_directory + "/" + datum["uuid"] + ".md"

    note = datum.get("note", "")
    with open(note_file, "w") as f:
        f.write(note)

    # launch editor
    return_value = subprocess.call("vim " + note_file, shell=True)

    # read new note contents
    with open(note_file, "r") as f:
        content = f.readlines()
        note = "".join(content)

    os.remove(note_file)

    # write note to datum
    if note != "":
        datum["note"] = note
    elif "note" in datum:
        del datum["note"]

    datum["modified"] = int(time.time())
    return data

def remove(args, data, metadata):
    # validate arguments
    if len(args) != 1:
        print("the 'remove' command requires 1 argument")
        sys.exit(1)

    # parse and validate id
    indices = parse_id(args[0])
    list_row, card_row = get_rows(data, metadata, indices, False)

    # delete datum
    if len(indices) == 1:
        # check if list has children
        list_uuid = data[list_row]["uuid"]
        if len(metadata[list_uuid]) != 0:
            print("list '" + str(indices[0]) + "' is not empty")
            sys.exit(1)

        del data[list_row]
    elif len(indices) == 2:
        # add datum to completed file
        datum = data[card_row]

        datum["completed"] = int(time.time())
        with open(task_completed_file, "a") as f:
            f.write(json.dumps(datum, sort_keys=True) + "\n")

        del data[card_row]

    return data

def show(args, data, metadata):
    # validate arguments
    if len(args) != 1:
        print("the 'show' command requires 1 argument")
        sys.exit(1)

    # parse and validate id
    indices = parse_id(args[0])
    list_row, card_row = get_rows(data, metadata, indices, False)

    # print datum
    if len(indices) == 1:
        datum = data[list_row]
    elif len(indices) == 2:
        datum = data[card_row]

    print(json.dumps(datum, sort_keys=False, indent=2))

if __name__ == "__main__":
    commands = {
        "add": add,
        "cat": cat,
        "list": list,
        "move": move,
        "modify": modify,
        "note": note,
        "remove": remove,
        "show": show,
    }

    if len(sys.argv) <= 1 or sys.argv[1] == "help":
        print(help_message)
        sys.exit(1)
    elif sys.argv[1] == "context":
        print("unimplemented")
        sys.exit(1)
    elif sys.argv[1] == "switch":
        if len(sys.argv) != 3:
            print("the 'switch' command requires 1 argument")
            sys.exit(1)

        f = open(context_file, "w")
        f.write(sys.argv[2])
        f.close()
        sys.exit(1)
    elif not sys.argv[1] in commands:
        print(help_message)
        sys.exit(1)

    # parse context
    f = open(context_file, "r")
    context = f.read()
    f.close()

    if context == "":
        print("context does not exist - set with 'switch' command")
        sys.exit(1)

    task_completed_file = data_directory + "/" + context + ".completed"
    task_data_file = data_directory + "/" + context + ".data"
    if not os.path.exists(task_completed_file):
        touch(task_completed_file)

    if not os.path.exists(task_data_file):
        touch(task_data_file)

    # parse data contents
    f = open(task_data_file, "r")
    contents = f.readlines()
    f.close()

    data = []
    for content in contents:
        data.append(json.loads(content))

    metadata = {}
    for count, datum in enumerate(data):
        if "parent" in datum:
            metadata[datum["parent"]].append(count)
        else:
            metadata[datum["uuid"]] = []

    # execute subcommand
    data = commands[sys.argv[1]](sys.argv[2:] , data, metadata)

    # write contents back
    if data:
        f = open(task_data_file, "w")
        for datum in data:
            f.write(json.dumps(datum, sort_keys=True) + "\n")
        f.close()
