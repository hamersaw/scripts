#!/bin/bash

version="0.1.5"
usage="USAGE: $(basename $0) COMMAND
COMMAND:
    help                        display this help menu
    add <element> <title>       add an element at the desired location
    edit <element>              edit an existing element
    hide <element>              mark an element as hidden
    list [element]              list all elements
    move <element> <element>    move an element within the same level
    remove <element>            remove the specified element
    unhide <element>            unmark an element as hidden
    version                     display the application version"

# load commands from element library
. element.sh

# initialize instance variables
datadir="$HOME/.local/share/due"
gatefile="$datadir/gatefile"
hidefile="$datadir/hidefile"
levels=( "board" "list" "card" )

# if doesn't exist -> create base configuration files
[ ! -d "$datadir" ] && mkdir -p "$datadir"
[ ! -f "$gatefile" ] && touch "$gatefile"
[ ! -f "$hidefile" ] && touch "$hidefile"

print_element() {
    # initialize instance variables
    parent_id "$2"
    find_element "$parentid" 

    # get element attributes
    local index="${2##*.}"
    local uuid=$(head -n "$index" "$element" \
        | tail -n 1 | awk '{print $1}')
    local title=$(head -n "$index" "$element" \
        | tail -n 1 | awk '{$1=""; print substr($0,2)}')

    # compile tags
    local tags=()
    if [ -f "$datadir/$uuid.md" ]; then
        tags+=("note")
    fi

    local hidden="0"
    if grep -Fxq "$uuid" "$hidefile"; then
        local hidden="1"
    fi

    # print element
    local indent=""
    for (( i=0; i<$1; i++ )); do
        local indent="    $indent"
    done

    if [ "$1" -ne "0" ] && [ "$hidden" -eq "1" ]; then
        local childcount=$(wc -l "$datadir/$uuid" | awk '{print $1}')
        tags+=("$childcount hidden")

        tagstring=$(join_tags "${tags[@]}")
        echo "$indent$2 $title $tagstring"
        return
    else
        tagstring=$(join_tags "${tags[@]}")
        echo "$indent$2 $title $tagstring"
    fi

    # print children
    local count=1
    while read line; do
        print_element $(( $1 + 1 )) "$2.$count"
        local count=$(( count + 1 ))
    done <"$datadir/$uuid"
}

# execute command
case "$1" in
    add)
        # check argument length
        (( $# != 3 )) && echo "'add' requires two arguments" && exit 1

        # add element
        uuid=$(tr -dc 'A-F0-9' < /dev/urandom \
            | dd status=none bs=1 count=32)
        add_element "$2" "$uuid" "$3"

        echo "[+] added ${levels[$idlevel]} '$2' '$3'"
        ;;
    edit)
        # check argument length
        (( $# != 2 )) && echo "'edit' requires one argument" && exit 1

        # validate element
        validate_id "$2"
        find_element "$2" 

        vim "$element.md"

        # if note file is empty -> remove
        if [[ ! -s "$element.md" ]]; then
            rm "$element.md"
        fi
        ;;
    help)
        echo "$usage"
        ;;
    hide)
        # check argument length
        (( $# != 2 )) && echo "'hide' requires one argument" && exit 1

        # find element
        validate_id "$2"
        find_element "$2"
        uuid="${element##*\/}"

        # check if card
        id_level "$2"
        if [ "$(( $idlevel + 1 ))" -ge "${#levels[@]}" ]; then
            echo "unable to hide at '${levels[${#levels[@]}-1]}' level" \
                && exit 1
        fi

        # add element to hidefile
        echo "$uuid" >> "$hidefile"

        echo "[+] hide ${levels[$idlevel]} '$2'"
        ;;
    list)
        # check argument length
        (( $# > 2 )) && \
            echo "'list' requires zero or one argument(s)" && exit 1

        if [[ $# != 2 ]]; then
            # if no element argument -> print all boards
            awk '{$1=""; print NR " - " substr($0,2)}' "$gatefile"
        else
            # ensure element exists
            validate_id "$2"
            find_element "$2" 

            print_element "0" "$2"
        fi
        ;;
    move)
        # check argument length
        (( $# != 3 )) && \
            echo "'remove' requires three arguments" && exit 1

        move_element "$2" "$3"

        id_level "$2"
        echo "[|] moved ${levels[$idlevel]} '$2' to '$3'"
        ;;
    remove)
        # check argument length
        (( $# != 2 )) && echo "'remove' requires one argument" && exit 1

        remove_element "$2"

        id_level "$2"
        echo "[-] removed ${levels[$idlevel]} '$2'"
        ;;
    unhide)
        # check argument length
        (( $# != 2 )) && echo "'unhide' requires one argument" && exit 1

        # find element to remove (to ensure it exists)
        validate_id "$2"
        find_element "$2"
        uuid="${element##*\/}"

        # check if card
        id_level "$2"
        if [ "$(( $idlevel + 1 ))" -ge "${#levels[@]}" ]; then
            echo "unable to unhide at '${levels[${#levels[@]}-1]}' level" \
                && exit 1
        fi

        # remove id from hidefile
        sed -i "/$uuid/d" "$hidefile"

        echo "[-] unhide ${levels[$idlevel]} '$2'"
        ;;
    version)
        echo "$version"
        ;;
    *)
        echo "$usage"
        exit 1
        ;;
esac
